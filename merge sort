#include <iostream>
using namespace std;

void merge(int a[], int const left, int const mid,
		int const right)
{
  int n = mid-left+1;
  int m = right-mid;
  
  int la[n], ma[m];
  for(int i=0;i<n;i++) la[i] = a[left+i];
  for(int i=0;i<m;i++) ma[i] = a[mid+1+i];
  
  int p = 0, q=0, r=left;
  while(p!=n && q!=m){
    if(la[p]<=ma[q]){
      a[r] = la[p];
      p++;
    }else{
      a[r] = ma[q];
      q++;
    }
    r++;
  }
  while(p!=n){
      a[r] = la[p];
      p++;
    r++;
  }
  
  while(q!=m){
      a[r] = ma[q];
      q++;
    r++;
  }
}

void mergeSort(int array[], int const begin, int const end)
{
	if (begin >= end)
		return; // Returns recursively

	auto mid = begin + (end - begin) / 2;
	mergeSort(array, begin, mid);
	mergeSort(array, mid + 1, end);
	merge(array, begin, mid, end);
}


void printArray(int A[], int size)
{
	for (auto i = 0; i < size; i++)
		cout << A[i] << " ";
}

int main()
{
	int arr[] = { 12, 11, 13, 5, 6, 7 };
	auto arr_size = sizeof(arr) / sizeof(arr[0]);

	cout << "Given array is \n";
	printArray(arr, arr_size);

	mergeSort(arr, 0, arr_size - 1);

	cout << "\nSorted array is \n";
	printArray(arr, arr_size);
	return 0;
}
